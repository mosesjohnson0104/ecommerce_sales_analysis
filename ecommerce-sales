	-- Create database
	CREATE DATABASE IF NOT EXISTS EcommerceDB;
	USE EcommerceDB;

	-- Customers Table
	CREATE TABLE Customers (
		customer_id INT PRIMARY KEY,
		name VARCHAR(100),
		location VARCHAR(100),
		join_date DATE
	);

	-- Products Table
	CREATE TABLE Products (
		product_id INT PRIMARY KEY,
		name VARCHAR(100),
		category VARCHAR(50),
		price DECIMAL(10,2)
	);

	-- Orders Table
	CREATE TABLE Orders (
		order_id INT PRIMARY KEY,
		customer_id INT,
		order_date DATE,
		total_amount DECIMAL(10,2),
		FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
	);

	-- Order Items Table
	CREATE TABLE Order_Items (
		item_id INT PRIMARY KEY,
		order_id INT,
		product_id INT,
		quantity INT,
		FOREIGN KEY (order_id) REFERENCES Orders(order_id),
		FOREIGN KEY (product_id) REFERENCES Products(product_id)
	);

	-- Insert sample data
	INSERT INTO Customers VALUES
	(1, 'Moses', 'Chennai', '2023-01-01'),
	(2, 'Ravi', 'Delhi', '2023-03-01'),
	(3, 'Sofia', 'Mumbai', '2023-02-10');

	INSERT INTO Products VALUES
	(101, 'Laptop', 'Electronics', 55000),
	(102, 'Phone', 'Electronics', 20000),
	(103, 'Shoes', 'Fashion', 3000);

	INSERT INTO Orders VALUES
	(1001, 1, '2023-07-01', 55000),
	(1002, 1, '2023-08-15', 23000),
	(1003, 2, '2023-09-05', 6000);

	INSERT INTO Order_Items VALUES
	(1, 1001, 101, 1),
	(2, 1002, 102, 1),
	(3, 1002, 103, 1),
	(4, 1003, 103, 2);

	-- 1. Top-selling products
	SELECT p.name, SUM(oi.quantity) AS total_sold
	FROM Order_Items oi
	JOIN Products p ON oi.product_id = p.product_id
	GROUP BY p.name
	ORDER BY total_sold DESC;

	-- 2. Revenue by product category
	SELECT p.category, SUM(p.price * oi.quantity) AS total_revenue
	FROM Order_Items oi
	JOIN Products p ON oi.product_id = p.product_id
	GROUP BY p.category;

	-- 3. Returning vs New Customers
	SELECT c.customer_id, c.name, COUNT(o.order_id) AS total_orders
	FROM Customers c
	LEFT JOIN Orders o ON c.customer_id = o.customer_id
	GROUP BY c.customer_id, c.name;

	-- 4. Average order value by month
	SELECT DATE_FORMAT(order_date, '%Y-%m') AS month, 
		   COUNT(order_id) AS total_orders,
		   ROUND(SUM(total_amount) / COUNT(order_id), 2) AS avg_order_value
	FROM Orders
	GROUP BY month;

	-- 5. Customer Lifetime Value (CLV)
	SELECT c.name, SUM(o.total_amount) AS lifetime_value
	FROM Customers c
	JOIN Orders o ON c.customer_id = o.customer_id
	GROUP BY c.name
	ORDER BY lifetime_value DESC;
